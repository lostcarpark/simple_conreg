<?php

/**
 * @file
 * Module file for simple convention registration. May do more in future.
 */

//Warning: should not be in namespace!

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\devel;
use Drupal\simple_conreg\SimpleConregEventStorage;
use Drupal\simple_conreg\SimpleConregStorage;
use Drupal\simple_conreg\SimpleConregOptions;
use Drupal\simple_conreg\SimpleConregEmailer;

function simple_conreg_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    //case 'simple_conreg_register':
      // Help text for the simple page registered for this path.
      //return t('Please register your details.');

    case 'help.page.simple_conreg':
      // Help text for the admin section, using the module name in the path.
      return t("Configure settings for convention registration.");
  }
}

function simple_conreg_mail($key, &$message, $params) {
  $eid = $params['eid'];

  $event = SimpleConregEventStorage::load(['eid' => $eid]);

  $config = \Drupal::config('simple_conreg.settings.'.$eid);
  $symbol = $config->get('payments.symbol');

  // Get language message to be sent in.
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    // Send a simple message from the registration form.
    case 'confirmation_message':
    case 'organiser_copy_message':
      // Get the member type options.
      $types = explode("\n", $config->get('member_types')); // One type per line.
      $typeOptions = array();
      foreach ($types as $type) {
        list($code, $desc, $price) = explode('|', $type);
        $typeOptions[$code] = $desc;
      }

      // List of fields to add to mail for each member.
      $confirm_labels = array(
        'first_name' => 'fields.first_name_label',
        'last_name' => 'fields.last_name_label',
        'badge_name' => 'fields.badge_name_label',
        'email' => 'fields.email_label',
        'display' => 'fields.display_label',
        'communications_method' => 'fields.communications_method_label',
        'street' => 'fields.street_label',
        'street2' => 'fields.street2_label',
        'city' => 'fields.city_label',
        'county' => 'fields.county_label',
        'postcode' => 'fields.postcode_label',
        'country' => 'fields.country_label',
        'phone' => 'fields.phone_label',
        'birth_date' => 'fields.birth_date_label',
        'member_type' => 'fields.member_type_label',
        'add_on' => 'add_ons.label',
        'add_on_info' => 'add_on_info.label',
        'extra_flag1' => 'extras.flag1',
        'extra_flag2' => 'extras.flag2',
      );
      // Look up labels for fields to email.
      $confirm_fields = array();
      foreach ($confirm_labels as $key=>$val) {
        if (!empty($config->get($val))) {
          $confirm_fields[$key] = $config->get($val);
        }
      }
      // Add price with static label.
      $confirm_fields['member_price'] = 'Price for member';
      // Labels for display option and communications method. Will add to config later.
      $displayOptions = array(
        'F' => t('Full name and badge name'),
        'B' => t('Badge name only'),
        'N' => t('Not at all'),
      );
      $communicationsOptions = array('E' => t('Electronic only'),
                                     'P' => t('Paper only'),
                                     'B' => t('Both electronic and paper'));
      $yesNoOptions = array(
        0 => t('No'),
        1 => t('Yes'),
      );

      // Set message subject, depending on key.
      $event_name = $event['event_name'];
      if ($key == 'organiser_copy_message') {
        $message['subject'] = t('New member @member_name has registered for @event-name', array('@member_name' => trim($params['first'] . ' ' . $params['last']),'@event-name' => $event_name), $options);
      } else {
        $message['subject'] = t('Thank you for registering for @event-name', array('@event-name' => $event_name), $options);
      }

      // Replacement strings.
      $find = array("[first_name]", "[last_name]", "[email]", "[payment_url]");
      $replace = array(SafeMarkup::checkPlain($params['first']), SafeMarkup::checkPlain($params['last']), SafeMarkup::checkPlain($params['email']), $params['payment_url']);
      // Note that the message body is an array, not a string.
      $message['body'][] = str_replace($find, $replace, $config->get('confirmation.reg_header'));
      foreach($params['members'] as $memberNo=>$memberVals) {
        // Expand list values and add currency symbol.
        $memberVals['display'] = $displayOptions[$memberVals['display']];
        $memberVals['member_price'] = $symbol . $memberVals['member_price'];
        $memberVals['member_type'] = $typeOptions[$memberVals['member_type']];
        if (!empty($memberVals['communication_method']))
          $memberVals['communication_method'] = $communicationOptions[$memberVals['communication_method']];
        $memberVals['extra_flag1'] = $yesNoOptions[$memberVals['extra_flag1']];
        $memberVals['extra_flag2'] = $yesNoOptions[$memberVals['extra_flag2']];
        
        // Concatenate values into a string.
        $memberDetails = t("Member @number details:", array('@number' => $memberNo), $options);
        foreach($confirm_fields as $field => $label) {
          if (!empty($label) && isset($memberVals[$field])) {
            $memberDetails .= "\n" . t($label, array(), $options) . ": " . SafeMarkup::checkPlain($memberVals[$field]);
          }
        }
        // Add member details to message body.
        $message['body'][] = $memberDetails;
      }
      $message['body'][] = str_replace($find, $replace, $config->get('confirmation.reg_footer'));
      //$message['body'][] = SafeMarkup::checkPlain($params['message']);
      break;


    // Payment receipt message.
    case 'payment_message':
    case 'organiser_payment_message':
      // Set message subject, depending on key.
      $event_name = $event['event_name'];
      if ($key == 'organiser_payment_message') {
        $message['subject'] = t('Payment received from @member_name for @event-name', array('@member_name' => $params['first_name'] . ' ' . $params['last_name'],'@event-name' => $event_name), $options);
      } else {
        $message['subject'] = t('Receipt for your payment for @event-name', array('@event-name' => $event_name), $options);
      }

      $find = array("[first_name]", "[last_name]", "[email]", "[payment_amount]", "[payment_id]");
      $replace = array($params['first_name'], $params['last_name'], $params['email'], $symbol . $params['payment_amount'], $params['payment_id']);
      $message['body'][] = str_replace($find, $replace, $config->get('confirmation.pay_template'));
      break;
    
    // Use template handler.
    case 'template':
      SimpleConregEmailer::createEmail($message, $params);
      break;

  }
  if (!empty($params['from'])) {
    $message['from'] = $params['from'];
    $message['headers']['From'] = $params['from'];
  }
}

function simple_conreg_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  switch ($form_id) {
    case "simplenews_newsletter_edit_form":
      $newsletter_id = $form['id']['#default_value'];
      $config = \Drupal::config('simple_conreg.settings');
      $simplenews_options = $config->get('simplenews.options');
      $active = $simplenews_options[$newsletter_id]['active'];
      $communications_methods = $simplenews_options[$newsletter_id]['communications_methods'];
      
      // No break as we're just setting up the default values for the extra form fields, which are also used by the "Add" form.
    case "simplenews_newsletter_add_form":
      if (!isset($active)) $active = 0;
      $form['simple_conreg'] = [
        '#type' => 'fieldset',
        '#title' => t('Simple Convention Registration'),
        '#tree' => TRUE,
      ];
      $form['simple_conreg']['active'] = [
        '#type' => 'checkbox',
        '#title' => t('Automatically populate this newsletter with convention memberes'),
        '#description' => t('Check this box if you want this newsletter to be populated with convention members that meet the criteria below. This may cause other members to be unsubscribed, so best not to expose a sign-up form if using this for convention members.'),
        '#default_value' => $active,
      ];
      $form['simple_conreg']['communications_methods'] = [
        '#type' => 'checkboxes',
        '#title' => t('Communications methods to subscribe to newsletter'),
        '#options' => SimpleConregOptions::communicationMethod($eid),
        '#default_value' => $communications_methods,
      ];

      // Attach our custom submit handler.
      $form['actions']['submit']['#submit'][] = 'simple_conreg_simplenews_form_submit';
      break;
  }
}

function simple_conreg_simplenews_form_submit ($form, FormStateInterface $form_state) {
  $form_values = $form_state->getValues();
  
  $newsletter_id = $form_values['id'];
  $active = $form_values['simple_conreg']['active'];
  $communications_methods = $form_values['simple_conreg']['communications_methods'];
  $config = \Drupal::service('config.factory')->getEditable('simple_conreg.settings');
  $simplenews_options = $config->get('simplenews.options');
  $simplenews_options[$newsletter_id]['active'] = $active;
  $simplenews_options[$newsletter_id]['communications_methods'] = $communications_methods;
  $config->set('simplenews.options', $simplenews_options);
  $config->save();

  // If newsletter is active for convention members, subscribe members matching criteria.
  if (isset($active) && $active) {
    // Check SimpleNews module loaded.
    if (\Drupal::moduleHandler()->moduleExists('simplenews')) {
      // Get unique convention member email addresses.
      $members = SimpleConregStorage::adminSimplenewsSubscribeListLoad();
    
      // Get Drupal SimpleNews subscription manager.
      $subscription_manager = \Drupal::service('simplenews.subscription_manager');
      // Loop through convention members.
      foreach ($members as $member) {
        // Check if member matches newsletter criteria.
        if (isset($member['method']) &&
            isset($communications_methods[$member['method']]) &&
            $communications_methods[$member['method']]) {
          // Subscribe member if criteria met.
          $subscription_manager->subscribe($member['email'], $newsletter_id, FALSE, 'website');
        } else {
          // Unsubscribe member if criteria don't match.
          $subscription_manager->unsubscribe($member['email'], $newsletter_id, FALSE, 'website');
        }
      }
    }
  }
}
