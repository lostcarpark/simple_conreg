<?php

/**
 * @file
 * Install, update and uninstall functions for the simple_conreg module.
 */

/**
 * Implements hook_requirements().
 */
function simple_conreg_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    if (!class_exists('\Stripe\Stripe')) {
      $requirements['addressing_library'] = [
        'description' => t('Simple Convention Registration requires the stripe/stripe-php library. Please see README for install instructions.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Creates some default entries on this module custom table.
 *
 * @see hook_install()
 * @ingroup simple_conreg
 */
function simple_conreg_install() {
}

/**
 * Implements hook_schema().
 *
 * Defines the database tables used by this module.
 *
 * @see hook_schema()
 * @ingroup simple_conreg
 */
function simple_conreg_schema() {
  // create table simple_conreg_events (eid int auto_increment primary key, event_name varchar(255) not null, is_open tinyint not null default '1');
  $schema['simple_conreg_events'] = array(
    'description' => 'Stores events on the registration system.',
    'fields' => array(
      'eid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique event ID.',
      ),
      'event_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Name of the event.',
      ),
      'is_open' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Set to 1 if event is open for registration.',
      ),
    ),
    'primary key' => array('gid'),
  );


  $schema['simple_conreg_members'] = array(
    'description' => 'Stores member details for convention registrations.',
    'fields' => array(
      'mid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique member ID.',
      ),
      // alter table simple_conreg_members add eid int NOT NULL default '1' after mid;
      'eid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Foreign Key: Event ID.',
      ),
      'lead_mid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Member ID of lead member (to link groups who register together)",
      ),
      'random_key' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "A random generated key to provide some security in payment URL",
      ),
      'member_no' => array(
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'description' => "Member number - assigned once approved.",
      ),
      // alter table simple_conreg_members modify column member_type varchar(4);
      'member_type' => array(
        'type' => 'varchar',
        'length' => 4,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of membership.',
      ),
      // alter table simple_conreg_members add communication_method varchar(1) NULL after member_type;
      'communication_method' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        'default' => '',
        'description' => 'E=Electronic, P=Paper, B=Both.',
      ),
      'is_approved' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Set to 1 if member wishes to volunteer to help.',
      ),
      'approver_uid' => array(
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'description' => "User ID of the admin who approved the member.",
      ),
      'first_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'First name of the member.',
      ),
      'last_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Last name of the member.',
      ),
      'badge_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Badge name of the member.',
      ),
      // alter table simple_conreg_members add badge_type varchar(1) NULL after badge_name;
      // update simple_conreg_members set badge_type='A';
      // alter table simple_conreg_members modify column badge_type varchar(4);
      'badge_type' => array(
        'type' => 'varchar',
        'length' => 4,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of Badge (e.g. Attending, Guest, Committee, Dealer).',
      ),
      'display' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Display in membership list - F=Full Name, B=Badge Name, N=Not at all.',
      ),
      'email' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Email address of the member (only required for first member).',
      ),
      'street' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Street address of the member.',
      ),
      // alter table simple_conreg_members add street2 varchar(255) NULL after street;
      'street2' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Street address line 2 of the member.',
      ),
      'city' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Town/city address of the member.',
      ),
      'county' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'State/county of the member.',
      ),
      'postcode' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Postcode of the member.',
      ),
      'country' => array(
        'type' => 'varchar',
        'length' => 2,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Country of the member.',
      ),
      'phone' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Phone number of the member.',
      ),
      'birth_date' => array(
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp',
        'not null' => FALSE,
        'description' => 'SQL datetime for the member\'s date of birth.',
      ),
      'is_volunteer' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Set to 1 if member wishes to volunteer to help.',
      ),
      'member_price' => array(
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0.0,
        'description' => 'Price for this member.',
      ),
      'is_paid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Set to 1 if payment complete.',
      ),
      'payment_method' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'How payment received (Stripe, PayPal, etc).',
      ),
      'payment_amount' => array(
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0.0,
        'description' => 'Total amount received.',
      ),
      'payment_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Payment confirmation code from Stripe or other payment system.',
      ),
      // alter table simple_conreg_members add comment varchar(1024) NULL after payment_id;
      'comment' => array(
        'type' => 'varchar',
        'length' => 1024,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Admin comments about member.',
      ),
      'add_on' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Optional addons to membership.',
      ),
      'add_on_info' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Extra information about add-on.',
      ),      
      'extra_flag1' => array(
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Optional user defined extra checkbox.',
      ),
      'extra_flag2' => array(
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Optional user defined extra checkbox.',
      ),
      'join_date' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp for the date and time registered.',
      ),
      // alter table simple_conreg_members add is_deleted int NOT NULL default "0" after join_date;
      'is_deleted' => array(
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'True if member is deleted.',
      ),
    ),
    'primary key' => array('mid'),
    'indexes' => array(
      'name' => array('last_name', 'first_name'),
      'lead_mid' => array('lead_mid'),
    ),
  );

  // create table simple_conreg_option_groups (grpid int auto_increment primary key, eid int not null, field_name varchar(255), group_title varchar(255));
  $schema['simple_conreg_option_groups'] = array(
    'description' => 'Stores groups of field options.',
    'fields' => array(
      'grpid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique group ID.',
      ),
      'eid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Foreign Key: Event ID.',
      ),
      'field_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name of the linked form field (if null or blank, options not attached to any field).',
      ),
      'group_title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Title to be displayed for the field group (if null or blank, no title displayed).',
      ),
    ),
    'primary key' => array('grpid'),
  );

  // create table simple_conreg_options (optid int auto_increment primary key, grpid int not null, option_title varchar(255) not null, detail_title varchar(255), detail_is_required tinyint not null default '1', weight int not null default '1');
  $schema['simple_conreg_options'] = array(
    'description' => 'Stores field option details.',
    'fields' => array(
      'optid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique option ID.',
      ),
      'grpid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Foreign Key: Group ID, the option group this option belongs to.',
      ),
      'option_title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Text title of the option checkbox.',
      ),
      'detail_title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Text title of the option detail textbox.',
      ),
      'detail_is_required' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Set to 1 if the detail should be a required field.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Weight, to control order in checkbox list - biggest number goes to the bottom.',
      ),
    ),
    'primary key' => array('optid'),
  );

  // create table simple_conreg_fieldset_options (optid int not null, fieldset int not null, primary key (optid, fieldset));
  $schema['simple_conreg_fieldset_options'] = array(
    'description' => 'Stores groups of field options.',
    'fields' => array(
      'optid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Option ID to include in fieldset.',
      ),
      'fieldset' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Fieldset to include option.',
      ),
    ),
    'primary key' => array('optid', 'fieldset'),
  );

  // create table simple_conreg_member_options (mid int not null, optid int not null, is_selected tinyint not null default '1', option_detail varchar(255), primary key (mid, optid));
  $schema['simple_conreg_member_options'] = array(
    'description' => 'Stores member option choices.',
    'fields' => array(
      'mid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Compound Primary Key: Member ID.',
      ),
      'optid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Compound Primary Key: Option ID.',
      ),
      'is_selected' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Set to 1 if option has been selected.',
      ),
      'option_detail' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Optional text details entered for the option.',
      ),
    ),
    'primary key' => array('mid', 'grpid'),
  );

  return $schema;
}
